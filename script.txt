def check_for_updates(version_url, script_url, script_name):
    try:
        # Download version information
        version_response = requests.get(version_url)
        version_response.raise_for_status()
        latest_version = version_response.text.strip()

        # Convert version numbers to tuples of integers for comparison
        latest_version_tuple = tuple(map(int, latest_version.split('.')))
        current_version_tuple = (2, 4, 0)  # Replace with the current version of your application

        # Compare version numbers
        if latest_version_tuple > current_version_tuple:
            print("A new version ({}) of the application is available.".format(latest_version))
            download_and_execute_script(script_url, script_name)
        else:
            print("You're using the latest version ({}) of the application.".format('.'.join(map(str, current_version_tuple))))

    except requests.RequestException as e:
        print("An error occurred while checking for updates:", e)

def download_and_execute_script(script_url, script_name):
    try:
        # Download the script file from GitHub
        response = requests.get(script_url, stream=True)
        response.raise_for_status()

        # Get the total size of the script
        total_size = int(response.headers.get('content-length', 0))
        downloaded_size = 0

        # Save the downloaded script to a local file
        with open(script_name, "wb") as f:
            for chunk in response.iter_content(chunk_size=8192):
                if chunk:
                    f.write(chunk)
                    downloaded_size += len(chunk)
                    progress = downloaded_size / total_size * 100
                    show_progress(progress)

        print("\nScript downloaded successfully.")
        time.sleep(1)  # Optional: Add a delay before executing the script

        # Execute the downloaded script using subprocess
        print("Executing the downloaded script...")
        subprocess.run(["python", script_name])

        print("Script executed successfully.")

    except requests.RequestException as e:
        print("An error occurred while downloading or executing the script:", e)

def show_progress(progress):
    sys.stdout.write('\rDownloading script: {:.1f}%'.format(progress))
    sys.stdout.flush()
    time.sleep(0.1)

if __name__ == "__main__":
    # URL of the version file on GitHub
    version_url = "https://raw.githubusercontent.com/Aidwyd/D0xTracker/main/version.txt"
    
    # URL of the script file on GitHub
    script_url = "https://raw.githubusercontent.com/Aidwyd/D0xTracker/main/script.txt"

    # Name of the downloaded script file
    script_name = "DoxTracker.py"

    # Check for updates and execute the script if a new version is available
    check_for_updates(version_url, script_url, script_name)
