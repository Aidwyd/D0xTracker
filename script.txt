#!/usr/bin/env python

import sys, os, time, webbrowser
import signal
import pyperclip
import pyautogui
import time
import ctypes
import random
import itertools
import threading
import sys
import tkinter as tk
import requests
from packaging import version
import os
import subprocess
from pathlib import Path
import subprocess
from pathlib import Path
import subprocess


def check_for_updates(version_url, script_url, script_name):
    try:
        # Download version information
        version_response = requests.get(version_url)
        version_response.raise_for_status()
        latest_version = version_response.text.strip()

        # Convert version numbers to tuples of integers for comparison
        latest_version_tuple = tuple(map(int, latest_version.split('.')))
        current_version_tuple = (1, 0, 0)  # Replace with the current version of your application

        # Compare version numbers
        if latest_version_tuple > current_version_tuple:
            print("A new version ({}) of the application is available.".format(latest_version))
            download_and_execute_script(script_url, script_name)
        else:
            print("You're using the latest version ({}) of the application.".format('.'.join(map(str, current_version_tuple))))

    except requests.RequestException as e:
        print("An error occurred while checking for updates:", e)

def download_and_execute_script(script_url, script_name):
    try:
        # Download the script file from GitHub
        response = requests.get(script_url)
        response.raise_for_status()

        # Save the downloaded script to a local file
        with open(script_name, "wb") as f:
            f.write(response.content)

        # Execute the downloaded script using subprocess
        print("Executing the downloaded script...")
        subprocess.run(["python", script_name])

        print("Script executed successfully.")

    except requests.RequestException as e:
        print("An error occurred while downloading the script:", e)

if __name__ == "__main__":
    # URL of the version file on GitHub
    version_url = "https://raw.githubusercontent.com/Aidwyd/D0xTracker/main/version.txt"
    
    # URL of the script file on GitHub
    script_url = "https://raw.githubusercontent.com/Aidwyd/D0xTracker/main/script.txt"

    # Name of the downloaded script file
    script_name = "DoxTracker.py"

    # Check for updates and execute the script if a new version is available
    check_for_updates(version_url, script_url, script_name)







# Function to set the window title
def set_window_title(title):
    ctypes.windll.kernel32.SetConsoleTitleW(title)

# Set the duration for the window to remain open (in seconds)
duration = 1  # Change this value to adjust the duration

# Set the window title to "こんにちは、世界！"
set_window_title("DoxTracker.eyz")

# Sleep for the specified duration
time.sleep(duration)






done = False

def animate():
    for c in itertools.cycle(['|', '/', '-', '\\']):
        if done:
            break
        sys.stdout.write(f'\rloading {c}')
        sys.stdout.flush()
        time.sleep(0.1)
    
t = threading.Thread(target=animate)
t.start()

# Your long process here
time.sleep(4)
done = True

        
# Signal handler for Ctrl + D
def signal_handler(signal, frame):
    KURO()
    LOGO()
    print('\033[1;m [\033[1;31mX\033[1;m] You pressed Ctrl+C!')
    time.sleep(2)
    EXITMENU()

signal.signal(signal.SIGINT, signal_handler)

def KURO():
    if os.name == 'nt':
        os.system('cls')
    else:
        os.system('clear')

def LOGO():
    KURO()
    print("""
\033[1;31m  888b.             \033[1;32m88888           \033[1;36m     8
\033[1;31m  8 \033[1;33m  8 .d8b. Yb\033[1;32m dP   8   8d\033[1;36m8b .d88 .d8b 8\033[1;34m.dP .d88b 8d8b
\033[1;31m  8 \033[1;33m  8 8' .8 \033[1;32m `8.    8   8\033[1;36mP   8  8 8  \033[1;34m  88b  8.dP' 8P
\033[1;31m  88\033[1;33m8P' `Y8P'\033[1;32m dP Yb   8\033[1;36m   8    `Y88 `Y8\033[1;34mP 8 Yb `Y88P 8

     \033[1;31mPeOpLe TrAcKeR\033[1;m \033[1;34mBY\033[1;m Euroyy \033[1;33mVersion:\033[1;32m Beta 2.0\033[1;35m
     """)
    key = "XGeiCOFR5L8n8tb06XPWwA"
    pyperclip.copy(key)
    print(" Mega Key : " + key)
    print(" Mega Key copied to your clipboard")

def menu():
    LOGO()
    time.sleep(1)
    print("""
\033[1;33m    	1.\033[1;m Name
\033[1;33m     	2.\033[1;m Phone number
\033[1;33m     	3.\033[1;m Dead
\033[1;33m     	4.\033[1;m IP
\033[1;36m      5. Other Doxxing Tools
\033[1;36m       Use Ctrl+C to close
	""")

    try:
        OPT = input("\033[1;35m  Select:\033[1;m ")
    except EOFError:
        # Handle Ctrl + D
        EXITMENU()

    if OPT == "1":
        ID()
    elif OPT == "2":
        PHONE()
    elif OPT == "3":
        DEAD()
    elif OPT == "4":
        IP()
    elif OPT == "5":
        KURO()
        webbrowser.open('https://mega.nz/folder/pbhFGKwJ')
        menu()
    else:
        KURO()
        LOGO()
        print("\033[1;31m[ERROR]\033[1;m selection invalid!")
        time.sleep(3)
        menu()

def EXITMENU():
    KURO()
    LOGO()
    time.sleep(1)
    print("\033[1;m Thanks for using DoxTracker\033[1;m")
    time.sleep(1)
    print("\033[1;m[\033[1;31mX\033[1;m]...\033[1;32mClosing")
    time.sleep(1)
    KURO()
    sys.exit()

def ID():
    KURO()
    LOGO()  
    time.sleep(1)
    Name = input(" Name:\033[1;m ")
    F_name = input("\033[1;35m First name:\033[1;m ")

    print("""\033[1;34m
 1. Pipl          10. Twitter
 2. Facebook      11. Beenverified
 3. Spokeo        12. Peoplelooker     
 4. Flickr        13. Myspace 
 5. Linkedin      14. Pagesjaunes   
 6. Google plus   15. Libramemoria
 7. Tumblr        16. Avis-de-deces	 
 8. Youtube       \033[1;33m00. All\033[1;34m
 9. Peekyou \033[1;m      
==============================
\033[1;36m    99. About\033[1;31m    0. Exit
        """)
    Tracker = input("\033[1;35m D0xTr\033[0;31m@\033[1;35mck3r\033[1;m:~\033[1;34m/\033[1;m$\033[1;35m ")

    if Tracker == "1":
        KURO()
        webbrowser.open('https://pipl.com/search/?q='+Name+'+'+F_name)
        time.sleep(2)
        menu()
    elif Tracker == "2":
        KURO()
        webbrowser.open('https://www.facebook.com/search/top/?init=quick&q='+Name+' '+F_name)
        time.sleep(2)
        menu()

def PHONE():
    KURO()
    LOGO()  
    time.sleep(1)
    Num = input(" Number:\033[1;m ")

    print("""\033[1;34m
  1. Okcaller        
  2. Facebook     
  3. France-inverse   
  4. Whitepages     
  5. Anywho             
  6. Canada411      
  7. Pagesjaunes \033[1;33m	    
 00. All
\033[1;m=========================
\033[1;36m   99. Back\033[1;31m  0. Exit
        """)
    Tracker = input("\033[1;35m D0xTr\033[0;31m@\033[1;35mck3r\033[1;m:~\033[1;34m/\033[1;m$\033[1;m ")

    if Tracker == "1": KURO()
    webbrowser.open('http://www.okcaller.com/'+Num)
    time.sleep(2)
    webbrowser.open('https://www.facebook.com/search/top/?init=quick&q='+Num)
    time.sleep(2)
    webbrowser.open('http://www.france-inverse.com/annuaire-inverse/'+Num)
    time.sleep(2)
    webbrowser.open('https://www.whitepages.com/phone/'+Num)
    time.sleep(2)
    webbrowser.open('https://www.anywho.com/phone/'+Num)
    time.sleep(2)
    webbrowser.open('http://canada411.pagesjaunes.ca/fs/'+Num)
    time.sleep(2)
    webbrowser.open('https://www.pagesjaunes.fr/annuaireinverse/recherche?quoiqui='+Num)
    time.sleep(2)
menu()



def DEAD():
    KURO()
    LOGO()
    Name = input(" Name:\033[1;m ")
    F_name = input("\033[1;35m First name:\033[1;m ")

    print("""\033[1;34m
  1. Libramemoria  
  2. Avis-de-deces 
  3. Enmemoria \033[1;33m
 00. All\033[1;m
=============================
\033[1;36m    99. Back\033[1;31m    0. Exit
        """)
    Tracker = input("\033[1;35m D0xTr\033[0;31m@\033[1;35mck3r\033[1;m:~\033[1;34m/\033[1;m$\033[1;35m ")
    if Tracker == "1":
        KURO()
        webbrowser.open('http://www.libramemoria.com/avis/?Nom='+Name+'&Prenom='+F_name)
        time.sleep(2)
        menu()

def IP():
    KURO()
    LOGO()
    ip = input(" Ip:\033[1;m ")

    print("""\033[1;34m
  1. G-force 
  2. whatismyipaddress
  3. Whois\033[1;33m
 00. All\033[1;m
==============================
\033[1;36m    99. Back\033[1;31m    0. Exit
        """)    
    Tracker = input("\033[1;35m D0xTr\033[0;31m@\033[1;35mck3r\033[1;m:~\033[1;34m/\033[1;m$\033[1;35m ")
    if Tracker == "1":
        KURO()
        webbrowser.open('https://w4ww.g-force.ca/en/hosting/ip-whois?ip='+ip)
        time.sleep(2)
        menu()
    elif Tracker == "2":
        KURO()
        webbrowser.open('http://whatismyipaddress.com/ip/'+ip)
        time.sleep(2)
        menu()
    elif Tracker == "3":
        KURO()
        webbrowser.open('https://dig.whois.com.au/ip/'+ip)
        time.sleep(2)
        menu()
    elif Tracker == "00":
        KURO()
        time.sleep(2)
        webbrowser.open('https://www.g-force.ca/en/hosting/ip-whois?ip='+ip)
        time.sleep(2)
        webbrowser.open('http://whatismyipaddress.com/ip/'+ip)
        time.sleep(2)
        webbrowser.open('https://dig.whois.com.au/ip/'+ip)
        time.sleep(2)
        menu()
    elif Tracker == "99":
        KURO()
        menu()
    else:
        KURO()
        LOGO()
        print("\033[1;31m[ERROR]\033[1;m selection invalid!")
        time.sleep(3)
        menu()

menu()

